<?xml version="1.0" encoding="UTF-8" ?>
<process
    name="travelGood"
    targetNamespace="urn:bpel.travelgood.dtu.dk"
    xmlns:tns="urn:bpel.travelgood.dtu.dk"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
    xmlns:sxt="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/Trace" 
    xmlns:sxed="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/Editor2"
    xmlns:sxat="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/Attachment"
    xmlns:sxeh="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/ErrorHandling" xmlns:sxxf="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/XPathFunctions" xmlns:ns0="urn:travelgood.dtu.dk" xmlns:ns1="urn:commons.travelgood.dtu.dk">
    <import namespace="urn:travelgood.dtu.dk" location="travelGood.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="urn:lameduck.dtu.dk" location="http://localhost:8080/lameduck/lameDuckService?wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="urn:niceview.dtu.dk" location="http://localhost:8080/niceview/niceViewService?wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="urn:commons.travelgood.dtu.dk" location="commonTypes.xsd" importType="http://www.w3.org/2001/XMLSchema"/>
    <import namespace="urn:utils.bpel.travelgood.dtu.dk" location="http://localhost:8080/TravelGoodBpelUtilsWS/travelGoodBpelUtilsService?wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <partnerLinks>
        <partnerLink name="LameDuckPartnerLink" xmlns:tns="urn:lameduck.dtu.dk" partnerLinkType="tns:lameDuckWSDL" partnerRole="lameDuckPortTypeRole"/>
        <partnerLink name="NiceViewPartnerLink" xmlns:tns="urn:niceview.dtu.dk" partnerLinkType="tns:niceViewWSDL" partnerRole="niceViewPortTypeRole"/>
        <partnerLink name="TravelGoodBpelUtilsPartnerLink" xmlns:tns="urn:utils.bpel.travelgood.dtu.dk" partnerLinkType="tns:travelGoodBpelUtils" partnerRole="travelGoodBpelUtilsPortTypeRole"/>
        <partnerLink name="TravelGoodPartnerLink" xmlns:tns="urn:travelgood.dtu.dk" partnerLinkType="tns:travelGoodWSDL" myRole="travelGoodPortTypeRole"/>
    </partnerLinks>
    <variables>
        <variable name="deadline" type="xs:dateTime"/>
        <variable name="GetProcessDeadlineOut" xmlns:tns="urn:utils.bpel.travelgood.dtu.dk" messageType="tns:getProcessDeadlineResponse"/>
        <variable name="GetProcessDeadlineIn" xmlns:tns="urn:utils.bpel.travelgood.dtu.dk" messageType="tns:getProcessDeadlineRequest"/>
        <variable name="GetInitialProcessDeadlineOut" xmlns:tns="urn:utils.bpel.travelgood.dtu.dk" messageType="tns:getProcessDeadlineResponse"/>
        <variable name="GetInitialProcessDeadlineIn" xmlns:tns="urn:utils.bpel.travelgood.dtu.dk" messageType="tns:getProcessDeadlineRequest"/>
        <variable name="CancelItineraryOutFalse" messageType="ns0:cancelItineraryResponse"/>
        <variable name="BookItineraryFalseOut" messageType="ns0:bookItineraryResponse"/>
        <variable name="CancelItineraryOut" messageType="ns0:cancelItineraryResponse"/>
        <variable name="CancelItineraryIn" messageType="ns0:cancelItineraryRequest"/>
        <variable name="BookItineraryOut" messageType="ns0:bookItineraryResponse"/>
        <variable name="BookItineraryIn" messageType="ns0:bookItineraryRequest"/>
        <variable name="AddHotelFalseOut" messageType="ns0:addHotelResponse"/>
        <variable name="AddFlightFalseOut" messageType="ns0:addFlightResponse"/>
        <variable name="AddHotelIn" messageType="ns0:addHotelRequest"/>
        <variable name="AddHotelOut" messageType="ns0:addHotelResponse"/>
        <variable name="AddFlightOut" messageType="ns0:addFlightResponse"/>
        <variable name="AddFlightIn" messageType="ns0:addFlightRequest"/>
        <variable name="CreateItineraryOut" xmlns:tns="urn:travelgood.dtu.dk" messageType="tns:createItineraryResponse"/>
        <variable name="CreateItineraryIn" xmlns:tns="urn:travelgood.dtu.dk" messageType="tns:createItineraryRequest"/>
        <variable name="GetItineraryOut" messageType="ns0:getItineraryResponse"/>
        <variable name="GetItineraryIn" messageType="ns0:getItineraryRequest"/>
        <variable name="GetHotelsOut" messageType="ns0:getHotelsResponse"/>
        <variable name="GetHotelsOut_NiceView" xmlns:tns="urn:niceview.dtu.dk" messageType="tns:getHotelsResponse"/>
        <variable name="GetHotelsIn_NiceView" xmlns:tns="urn:niceview.dtu.dk" messageType="tns:getHotelsRequest"/>
        <variable name="itinerary" type="ns1:itineraryType">
            <sxed:editor>
                <sxed:predicate path="$itinerary/ns1:flights/ns1:flight[$flightsCounter]" source="to"/>
                <sxed:predicate path="$itinerary/ns1:hotels/ns1:hotel[$hotelsCounter]" source="to"/>
            </sxed:editor>
        </variable>
        <variable name="isBooked" type="xs:boolean"/>
        <variable name="isCanceled" type="xs:boolean"/>
        <variable name="hotelsCounter" type="xs:int"/>
        <variable name="flightsCounter" type="xs:int"/>
        <variable name="GetFlightsOut" messageType="ns0:getFlightsResponse"/>
        <variable name="GetFlightsOut_LameDuck" xmlns:tns="urn:lameduck.dtu.dk" messageType="tns:getFlightsResponse"/>
        <variable name="GetFlightsIn_LameDuck" xmlns:tns="urn:lameduck.dtu.dk" messageType="tns:getFlightsRequest"/>
        <variable name="GetHotelsIn" messageType="ns0:getHotelsRequest"/>
        <variable name="GetFlightsIn" messageType="ns0:getFlightsRequest"/>
    </variables>
    <correlationSets>
        <correlationSet name="BookingNumberCorrelationSet" properties="ns0:bookingNumber"/>
    </correlationSets>
    <sequence>
        <scope name="CreateItinerarySequence">
            <sequence name="CreateItinerarySequence">
                <receive name="CreateItineraryReceive" createInstance="yes" partnerLink="TravelGoodPartnerLink" operation="createItinerary" xmlns:tns="urn:travelgood.dtu.dk" portType="tns:travelGoodPortType" variable="CreateItineraryIn"></receive>
                <assign name="NewItineraryAssign">
                    <copy>
                        <from>sxxf:getGUID()</from>
                        <to>$itinerary/ns1:id</to>
                    </copy>
                    <copy>
                        <from>false()</from>
                        <to variable="isBooked"/>
                    </copy>
                    <copy>
                        <from>false()</from>
                        <to variable="isCanceled"/>
                    </copy>
                    <copy>
                        <from>'IN_PROGRESS'</from>
                        <to>$itinerary/ns1:bookingState</to>
                    </copy>
                    <copy>
                        <from>'PENDING'</from>
                        <to>$itinerary/ns1:paymentStatus</to>
                    </copy>
                </assign>
                <!-- Uncomment this if you want to use Composite Application tests!
                <assign name="DELETE_ME_LATER">
                    <copy>
                        <from>'DELETE_THIS_ASSIGN_LATER'</from>
                        <to>$itinerary/ns1:id</to>
                    </copy>
                </assign>
                -->
                <assign name="CreateItineraryOutAssign">
                    <copy>
                        <from>$itinerary/ns1:id</from>
                        <to>$CreateItineraryOut.createItineraryResponsePart/bookingNumber</to>
                    </copy>
                </assign>
                <reply name="CreateItineraryReply" partnerLink="TravelGoodPartnerLink" operation="createItinerary" xmlns:tns="urn:travelgood.dtu.dk" portType="tns:travelGoodPortType" variable="CreateItineraryOut">
                    <correlations>
                        <correlation set="BookingNumberCorrelationSet" initiate="yes"/>
                    </correlations>
                </reply>
            </sequence>
        </scope>
        <sequence name="InitialFixDeadlineSequence" xmlns:tns="urn:utils.bpel.travelgood.dtu.dk">
            <assign name="AssignInitialCheckDeadline">
                <copy>
                    <from variable="itinerary"/>
                    <to>$GetInitialProcessDeadlineIn.getProcessDeadlineRequestPart/itinerary</to>
                </copy>
            </assign>
            <invoke name="InvokeInitialGetDeadline" partnerLink="TravelGoodBpelUtilsPartnerLink" operation="getProcessDeadline" xmlns:tns="urn:utils.bpel.travelgood.dtu.dk" portType="tns:travelGoodBpelUtilsPortType" inputVariable="GetInitialProcessDeadlineIn" outputVariable="GetInitialProcessDeadlineOut"/>
            <assign name="AssignInitialNewDeadline">
                <copy>
                    <from>$GetInitialProcessDeadlineOut.getProcessDeadlineResponse/deadline</from>
                    <to variable="deadline"/>
                </copy>
            </assign>
        </sequence>
        <repeatUntil name="GetAndAddFlightsAndHotelsRepeatUntil">
            <sequence name="GetAndAddFlightsAndHotelsSequence" xmlns:tns="urn:lameduck.dtu.dk">
                <pick name="GetAndAddFlightsAndHotelsPick">
                    <onMessage partnerLink="TravelGoodPartnerLink" operation="getItinerary" portType="ns0:travelGoodPortType" variable="GetItineraryIn">
                        <correlations>
                            <correlation set="BookingNumberCorrelationSet" initiate="no"/>
                        </correlations>
                        <sequence name="GetItinerarySequence">
                            <assign name="GetItineraryAssign">
                                <copy>
                                    <from variable="itinerary"/>
                                    <to>$GetItineraryOut.getItineraryResponsePart/itinerary</to>
                                </copy>
                            </assign>
                            <reply name="GetItineraryReply" partnerLink="TravelGoodPartnerLink" operation="getItinerary" portType="ns0:travelGoodPortType" variable="GetItineraryOut"/>
                        </sequence>
                    </onMessage>
                        
                    <onMessage partnerLink="TravelGoodPartnerLink" operation="getFlights" portType="ns0:travelGoodPortType" variable="GetFlightsIn">
                        <correlations>
                            <correlation set="BookingNumberCorrelationSet" initiate="no"/>
                        </correlations>
                        <sequence name="GetFlightsSequence">
                            <assign name="GetFlightsInAssign">
                                <copy>
                                    <from>$GetFlightsIn.getFlightsRequestPart/from</from>
                                    <to>$GetFlightsIn_LameDuck.getFlightsRequestPart/from</to>
                                </copy>
                                <copy>
                                    <from>$GetFlightsIn.getFlightsRequestPart/to</from>
                                    <to>$GetFlightsIn_LameDuck.getFlightsRequestPart/to</to>
                                </copy>
                                <copy>
                                    <from>$GetFlightsIn.getFlightsRequestPart/takeOffDate</from>
                                    <to>$GetFlightsIn_LameDuck.getFlightsRequestPart/takeOffDate</to>
                                </copy>
                            </assign>
                            <invoke name="GetFlightsFromLameDuckInvoke" partnerLink="LameDuckPartnerLink" operation="getFlights" xmlns:tns="urn:lameduck.dtu.dk" portType="tns:lameDuckPortType" inputVariable="GetFlightsIn_LameDuck" outputVariable="GetFlightsOut_LameDuck"/>
                            <assign name="GetFlightsOutAssign">
                                <copy>
                                    <from>$GetFlightsOut_LameDuck.getFlightsResponsePart/flights</from>
                                    <to>$GetFlightsOut.getFlightsResponsePart/flights</to>
                                </copy>
                            </assign>
                            <reply name="GetFlightsReply" partnerLink="TravelGoodPartnerLink" operation="getFlights" portType="ns0:travelGoodPortType" variable="GetFlightsOut"></reply>
                        </sequence>
                    </onMessage>
                    <onMessage partnerLink="TravelGoodPartnerLink" operation="getHotels" portType="ns0:travelGoodPortType" variable="GetHotelsIn">
                        <correlations>
                            <correlation set="BookingNumberCorrelationSet" initiate="no"/>
                        </correlations>
                        <sequence name="GetHotelsSequence">
                            <assign name="GetHotelsAssign">
                                <copy>
                                    <from>$GetHotelsIn.getHotelsRequestPart/city</from>
                                    <to>$GetHotelsIn_NiceView.getHotelsRequestPart/city</to>
                                </copy>
                                <copy>
                                    <from>$GetHotelsIn.getHotelsRequestPart/arrivalDate</from>
                                    <to>$GetHotelsIn_NiceView.getHotelsRequestPart/arrivalDate</to>
                                </copy>
                                <copy>
                                    <from>$GetHotelsIn.getHotelsRequestPart/departureDate</from>
                                    <to>$GetHotelsIn_NiceView.getHotelsRequestPart/departureDate</to>
                                </copy>
                            </assign>
                            <invoke name="GetHotelsFromNiceViewInvoke" partnerLink="NiceViewPartnerLink" operation="getHotels" xmlns:tns="urn:niceview.dtu.dk" portType="tns:niceViewPortType" inputVariable="GetHotelsIn_NiceView" outputVariable="GetHotelsOut_NiceView"/>
                            <assign name="GetHotelsOutAssign">
                                <copy>
                                    <from>$GetHotelsOut_NiceView.getHotelsResponsePart/hotels</from>
                                    <to>$GetHotelsOut.getHotelsResponsePart/hotels</to>
                                </copy>
                            </assign>
                            <reply name="GetHotelsReply" partnerLink="TravelGoodPartnerLink" operation="getHotels" portType="ns0:travelGoodPortType" variable="GetHotelsOut"/>
                        </sequence>
                    </onMessage>
                    <onMessage partnerLink="TravelGoodPartnerLink" operation="addFlight" portType="ns0:travelGoodPortType" variable="AddFlightIn">
                        <correlations>
                            <correlation set="BookingNumberCorrelationSet" initiate="no"/>
                        </correlations>
                        <sequence name="AddFlightSequence">
                            <if name="IfNotBookedAndNotCanceled_AddFlight">
                                <condition>not($isBooked) and not($isCanceled)</condition>
                                <sequence name="IfNotBookedAndNotCanceled_AddFlight_true">
                                    <assign name="UpdateFlightsCounterAssign">
                                        <copy>
                                            <from>1 + count($itinerary/ns1:flights/ns1:flight)</from>
                                            <to variable="flightsCounter"/>
                                        </copy>
                                    </assign>
                                    <assign name="AddFlightAssign">
                                        <copy>
                                            <from>true()</from>
                                            <to>$AddFlightOut.addFlightResponsePart/added</to>
                                        </copy>
                                        <copy>
                                            <from>$AddFlightIn.addFlightRequestPart/flight</from>
                                            <to>$itinerary/ns1:flights/ns1:flight[$flightsCounter]
                                                <sxed:editor>
                                                    <sxed:predicate path="$itinerary/ns1:flights/ns1:flight[$flightsCounter]" source="to"/>
                                                </sxed:editor>
                                            </to>
                                        </copy>
                                        <copy>
                                            <from>'IN_PROGRESS'</from>
                                            <to>$itinerary/ns1:flights/ns1:flight[$flightsCounter]/ns1:bookingState
                                                <sxed:editor>
                                                    <sxed:predicate path="$itinerary/ns1:flights/ns1:flight[$flightsCounter]" source="to"/>
                                                </sxed:editor>
                                            </to>
                                        </copy>
                                        <copy>
                                            <from>$itinerary/ns1:finalPrice + $AddFlightIn.addFlightRequestPart/flight/ns1:price</from>
                                            <to>$itinerary/ns1:finalPrice</to>
                                        </copy>
                                    </assign>
                                    <reply name="AddFlightReply" partnerLink="TravelGoodPartnerLink" operation="addFlight" portType="ns0:travelGoodPortType" variable="AddFlightOut"/>
                                </sequence>
                                <else>
                                    <sequence name="IfNotBookedAndNotCanceled_AddFlight_false">
                                        <assign name="AddFlightFalseReplyAssign">
                                            <copy>
                                                <from>false()</from>
                                                <to>$AddFlightFalseOut.addFlightResponsePart/added</to>
                                            </copy>
                                        </assign>
                                        <reply name="AddFlightFalseReply" partnerLink="TravelGoodPartnerLink" operation="addFlight" portType="ns0:travelGoodPortType" variable="AddFlightFalseOut"/>
                                    </sequence>
                                </else>
                            </if>
                        </sequence>
                    </onMessage>
                    <onMessage partnerLink="TravelGoodPartnerLink" operation="addHotel" portType="ns0:travelGoodPortType" variable="AddHotelIn">
                        <correlations>
                            <correlation set="BookingNumberCorrelationSet" initiate="no"/>
                        </correlations>
                        <sequence name="AddHotelSequence">
                            <if name="IfNotBookedAndNotCanceled_AddHotel">
                                <condition>not($isBooked) and not($isCanceled)</condition>
                                <sequence name="IfNotBookedAndNotCanceled_AddHotel_true">
                                    <assign name="UpdateHotelsCounterAssign">
                                        <copy>
                                            <from>1 + count($itinerary/ns1:hotels/ns1:hotel)</from>
                                            <to variable="hotelsCounter"/>
                                        </copy>
                                    </assign>
                                    <assign name="AddHotelAssign">
                                        <copy>
                                            <from>true()</from>
                                            <to>$AddHotelOut.addHotelResponsePart/added</to>
                                        </copy>
                                        <copy>
                                            <from>$AddHotelIn.addHotelRequestPart/hotel</from>
                                            <to>$itinerary/ns1:hotels/ns1:hotel[$hotelsCounter]
                                                <sxed:editor>
                                                    <sxed:predicate path="$itinerary/ns1:hotels/ns1:hotel[$hotelsCounter]" source="to"/>
                                                </sxed:editor>
                                            </to>
                                        </copy>
                                        <copy>
                                            <from>'IN_PROGRESS'</from>
                                            <to>$itinerary/ns1:hotels/ns1:hotel[$hotelsCounter]/ns1:bookingState
                                                <sxed:editor>
                                                    <sxed:predicate path="$itinerary/ns1:hotels/ns1:hotel[$hotelsCounter]" source="to"/>
                                                </sxed:editor>
                                            </to>
                                        </copy>
                                        <copy>
                                            <from>$itinerary/ns1:finalPrice + $AddHotelIn.addHotelRequestPart/hotel/ns1:price</from>
                                            <to>$itinerary/ns1:finalPrice</to>
                                        </copy>
                                    </assign>
                                    <reply name="AddHotelReply" partnerLink="TravelGoodPartnerLink" operation="addHotel" portType="ns0:travelGoodPortType" variable="AddHotelOut"/>
                                </sequence>
                                <else>
                                    <sequence name="IfNotBookedAndNotCanceled_AddHotel_false">
                                        <assign name="AddHotelFalseReplyAssign">
                                            <copy>
                                                <from>false()</from>
                                                <to>$AddHotelFalseOut.addHotelResponsePart/added</to>
                                            </copy>
                                        </assign>
                                        <reply name="AddHotelFalseReply" partnerLink="TravelGoodPartnerLink" operation="addHotel" portType="ns0:travelGoodPortType" variable="AddHotelFalseOut"/>
                                    </sequence>
                                </else>
                            </if>
                        </sequence>
                    </onMessage>
                    <onMessage partnerLink="TravelGoodPartnerLink" operation="bookItinerary" portType="ns0:travelGoodPortType" variable="BookItineraryIn">
                        <correlations>
                            <correlation set="BookingNumberCorrelationSet" initiate="no"/>
                        </correlations>
                        <scope name="BookItineraryScope">
                            <variables>
                                <variable name="BookItineraryFaultVar" messageType="ns0:bookItineraryFault"/>
                            </variables>
                            <faultHandlers>
                                <catchAll>
                                    <sequence name="RollbackFlightAndHotelReservations">
                                        <sequence name="FlightAndHotelRollbackSequence">
                                            <forEach name="RollbackFlightsForEach" parallel="no" counterName="RollbackFlightsForEachCounter">
                                                <startCounterValue>1</startCounterValue>
                                                <finalCounterValue>count($itinerary/ns1:flights/ns1:flight)</finalCounterValue>
                                                <scope name="RollbackSingleFlightSequence">
                                                    <variables>
                                                        <variable name="RollbackReservationOut_LameDuck" messageType="tns:cancelReservationResponse"/>
                                                        <variable name="RollbackReservationIn_LameDuck" messageType="tns:cancelReservationRequest"/>
                                                    </variables>
                                                    <sequence name="RollbackFlightsForEachSequence">
                                                        <if name="IfFlightBooked">
                                                            <condition>'BOOKED' = $itinerary/ns1:flights/ns1:flight[$RollbackFlightsForEachCounter]/ns1:bookingState</condition>
                                                            <sequence name="IfFlightBooked_true">
                                                                <assign name="FlightBookingNumberAssign">
                                                                    <copy>
                                                                        <from>$BookItineraryIn.bookItineraryRequestPart/creditCard/ns1:name</from>
                                                                        <to>$RollbackReservationIn_LameDuck.cancelReservationRequestPart/creditCard/ns1:name</to>
                                                                    </copy>
                                                                    <copy>
                                                                        <from>$BookItineraryIn.bookItineraryRequestPart/creditCard/ns1:number</from>
                                                                        <to>$RollbackReservationIn_LameDuck.cancelReservationRequestPart/creditCard/ns1:number</to>
                                                                    </copy>
                                                                    <copy>
                                                                        <from>$BookItineraryIn.bookItineraryRequestPart/creditCard/ns1:expMonth</from>
                                                                        <to>$RollbackReservationIn_LameDuck.cancelReservationRequestPart/creditCard/ns1:expMonth</to>
                                                                    </copy>
                                                                    <copy>
                                                                        <from>$BookItineraryIn.bookItineraryRequestPart/creditCard/ns1:expYear</from>
                                                                        <to>$RollbackReservationIn_LameDuck.cancelReservationRequestPart/creditCard/ns1:expYear</to>
                                                                    </copy>
                                                                    <copy>
                                                                        <from>$itinerary/ns1:flights/ns1:flight[$RollbackFlightsForEachCounter]/ns1:bookingNumber</from>
                                                                        <to>$RollbackReservationIn_LameDuck.cancelReservationRequestPart/bookingNumber</to>
                                                                    </copy>
                                                                    <copy>
                                                                        <from>$itinerary/ns1:flights/ns1:flight[$RollbackFlightsForEachCounter]/ns1:price</from>
                                                                        <to>$RollbackReservationIn_LameDuck.cancelReservationRequestPart/price</to>
                                                                    </copy>
                                                                </assign>
                                                                <invoke name="RollbackFlight_LameDuck" partnerLink="LameDuckPartnerLink" operation="cancelReservation" portType="tns:lameDuckPortType" inputVariable="RollbackReservationIn_LameDuck" outputVariable="RollbackReservationOut_LameDuck"/>
                                                                <if name="IfRollbackFlightSucceeded">
                                                                    <condition>$RollbackReservationOut_LameDuck.cancelReservationResponsePart/canceled</condition>
                                                                    <assign name="AssignFlightCanceled">
                                                                        <copy>
                                                                            <from>'CANCELLED'</from>
                                                                            <to>$itinerary/ns1:flights/ns1:flight[$RollbackFlightsForEachCounter]/ns1:bookingState
                                                                                <sxed:editor>
                                                                                    <sxed:predicate path="$itinerary/ns1:flights/ns1:flight[$flightsCounter]" source="to"/>
                                                                                </sxed:editor>
                                                                            </to>
                                                                        </copy>
                                                                    </assign>
                                                                </if>
                                                            </sequence>
                                                        </if>
                                                    </sequence>
                                                </scope>
                                            </forEach>
                                            <forEach name="RollbackHotelsForEach" parallel="no" counterName="RollbackHotelsForEachCounter">
                                                <startCounterValue>1</startCounterValue>
                                                <finalCounterValue>count($itinerary/ns1:hotels/ns1:hotel)</finalCounterValue>
                                                <scope name="RollbackSingleHotelsSequence">
                                                    <variables>
                                                        <variable name="RollbackHotelOut_NiceView" xmlns:tns="urn:niceview.dtu.dk" messageType="tns:cancelHotelResponse"/>
                                                        <variable name="RollbackHotelIn_NiceView" xmlns:tns="urn:niceview.dtu.dk" messageType="tns:cancelHotelRequest"/>
                                                    </variables>
                                                    <if name="IfHotelBooked">
                                                        <condition>'BOOKED' = $itinerary/ns1:hotels/ns1:hotel/ns1:bookingState</condition>
                                                        <sequence name="IfHotelBooked_true">
                                                            <assign name="HotelBookingNumberAssign">
                                                                <copy>
                                                                    <from>$itinerary/ns1:hotels/ns1:hotel[$RollbackHotelsForEachCounter]/ns1:bookingNumber</from>
                                                                    <to>$RollbackHotelIn_NiceView.cancelHotelRequestPart/bookingNumber</to>
                                                                </copy>
                                                            </assign>
                                                            <invoke name="RollbackHotel_NiceView" partnerLink="NiceViewPartnerLink" operation="cancelHotel" xmlns:tns="urn:niceview.dtu.dk" portType="tns:niceViewPortType" inputVariable="RollbackHotelIn_NiceView" outputVariable="RollbackHotelOut_NiceView"/>
                                                            <if name="IfCRollbackHotelSucceeded">
                                                                <condition>$RollbackHotelOut_NiceView.cancelHotelResponsePart/canceled</condition>
                                                                <assign name="AssignHotelCanceledStatus">
                                                                    <copy>
                                                                        <from>'CANCELLED'</from>
                                                                        <to>$itinerary/ns1:hotels/ns1:hotel[$RollbackHotelsForEachCounter]/ns1:bookingState</to>
                                                                    </copy>
                                                                </assign>
                                                            </if>
                                                        </sequence>
                                                    </if>
                                                </scope>
                                            </forEach>
                                        </sequence>
                                        <assign name="AssignBookItineraryFaultVar">
                                            <copy>
                                                <from>$BookItineraryIn.bookItineraryRequestPart/bookingNumber</from>
                                                <to>$BookItineraryFaultVar.bookItineraryFaultPart/bookingNumber</to>
                                            </copy>
                                            <copy>
                                                <from>'Book itinerary failed!'</from>
                                                <to>$BookItineraryFaultVar.bookItineraryFaultPart/reason</to>
                                            </copy>
                                        </assign>
                                        <reply name="BookItineraryFaultReply" partnerLink="TravelGoodPartnerLink" operation="bookItinerary" portType="ns0:travelGoodPortType" faultName="ns0:bookItineraryFault" variable="BookItineraryFaultVar"/>
                                    </sequence>
                                </catchAll>
                            </faultHandlers>
                            <if name="IfNotCanceledAndNotBooked_BookItinerary">
                                <condition>not($isCanceled) and not($isBooked)</condition>
                                <sequence name="IfNotCanceled_BookItinerary_true">
                                    <scope name="BookingScope">
                                        <sequence name="FlightAndHotelsBookingSequence">
                                            <forEach name="BookingFlightsForEach" parallel="no" counterName="BookingFlightsForEachCounter">
                                                <startCounterValue>1</startCounterValue>
                                                <finalCounterValue>count($itinerary/ns1:flights)</finalCounterValue>
                                                <scope name="BookingSingleFlightScope">
                                                    <variables>
                                                        <variable name="BookFlightOut_LameDuck" messageType="tns:bookFlightResponse"/>
                                                        <variable name="BookFlightIn_LameDuck" messageType="tns:bookFlightRequest"/>
                                                    </variables>
                                                    <sequence name="BookSingleFlightSequence_LameDuck">
                                                        <assign name="FlightBookingNumberAndCreditCardAssign">
                                                            <copy>
                                                                <from>$BookItineraryIn.bookItineraryRequestPart/creditCard/ns1:name</from>
                                                                <to>$BookFlightIn_LameDuck.bookFlightRequestPart/creditCard/ns1:name</to>
                                                            </copy>
                                                            <copy>
                                                                <from>$BookItineraryIn.bookItineraryRequestPart/creditCard/ns1:number</from>
                                                                <to>$BookFlightIn_LameDuck.bookFlightRequestPart/creditCard/ns1:number</to>
                                                            </copy>
                                                            <copy>
                                                                <from>$BookItineraryIn.bookItineraryRequestPart/creditCard/ns1:expMonth</from>
                                                                <to>$BookFlightIn_LameDuck.bookFlightRequestPart/creditCard/ns1:expMonth</to>
                                                            </copy>
                                                            <copy>
                                                                <from>$BookItineraryIn.bookItineraryRequestPart/creditCard/ns1:expYear</from>
                                                                <to>$BookFlightIn_LameDuck.bookFlightRequestPart/creditCard/ns1:expYear</to>
                                                            </copy>
                                                            <copy>
                                                                <from>$itinerary/ns1:flights/ns1:flight[$BookingFlightsForEachCounter]/ns1:bookingNumber</from>
                                                                <to>$BookFlightIn_LameDuck.bookFlightRequestPart/bookingNumber</to>
                                                            </copy>
                                                        </assign>
                                                        <invoke name="BookFlight_LameDuck" partnerLink="LameDuckPartnerLink" operation="bookFlight" portType="tns:lameDuckPortType" inputVariable="BookFlightIn_LameDuck" outputVariable="BookFlightOut_LameDuck"/>
                                                        <if name="IfBookFlightSucceeded">
                                                            <condition>$BookFlightOut_LameDuck.bookFlightResponsePart/booked</condition>
                                                            <assign name="AssignFlightBookedStatus">
                                                                <copy>
                                                                    <from>'BOOKED'</from>
                                                                    <to>$itinerary/ns1:flights/ns1:flight[$BookingFlightsForEachCounter]/ns1:bookingState</to>
                                                                </copy>
                                                            </assign>
                                                        </if>
                                                    </sequence>
                                                </scope>
                                            </forEach>
                                            <forEach name="BookingHotelsForEach" parallel="no" counterName="BookingHotelsForEachCounter">
                                                <startCounterValue>1</startCounterValue>
                                                <finalCounterValue>count($itinerary/ns1:hotels/ns1:hotel)</finalCounterValue>
                                                <scope name="BookSingleHotelScope">
                                                    <variables>
                                                        <variable name="BookHotelOut_NiceView" xmlns:tns="urn:niceview.dtu.dk" messageType="tns:bookHotelResponse"/>
                                                        <variable name="BookHotelIn_NiceView" xmlns:tns="urn:niceview.dtu.dk" messageType="tns:bookHotelRequest"/>
                                                    </variables>
                                                    <sequence name="BookSingleHotelSequence_HotelView">
                                                        <assign name="HotelBookingNumberAndCreditCardAssign">
                                                            <copy>
                                                                <from>$itinerary/ns1:hotels/ns1:hotel[$BookingHotelsForEachCounter]/ns1:bookingNumber</from>
                                                                <to>$BookHotelIn_NiceView.bookHotelRequestPart/bookingNumber</to>
                                                            </copy>
                                                            <copy>
                                                                <from>$BookItineraryIn.bookItineraryRequestPart/creditCard/ns1:name</from>
                                                                <to>$BookHotelIn_NiceView.bookHotelRequestPart/creditCard/ns1:name</to>
                                                            </copy>
                                                            <copy>
                                                                <from>$BookItineraryIn.bookItineraryRequestPart/creditCard/ns1:number</from>
                                                                <to>$BookHotelIn_NiceView.bookHotelRequestPart/creditCard/ns1:number</to>
                                                            </copy>
                                                            <copy>
                                                                <from>$BookItineraryIn.bookItineraryRequestPart/creditCard/ns1:expMonth</from>
                                                                <to>$BookHotelIn_NiceView.bookHotelRequestPart/creditCard/ns1:expMonth</to>
                                                            </copy>
                                                            <copy>
                                                                <from>$BookItineraryIn.bookItineraryRequestPart/creditCard/ns1:expYear</from>
                                                                <to>$BookHotelIn_NiceView.bookHotelRequestPart/creditCard/ns1:expYear</to>
                                                            </copy>
                                                        </assign>
                                                        <invoke name="BookHotel_NiceView" partnerLink="NiceViewPartnerLink" operation="bookHotel" xmlns:tns="urn:niceview.dtu.dk" portType="tns:niceViewPortType" inputVariable="BookHotelIn_NiceView" outputVariable="BookHotelOut_NiceView"/>
                                                        <if name="IfBookHotelSucceeded">
                                                            <condition>$BookHotelOut_NiceView.bookHotelResponsePart/booked</condition>
                                                            <assign name="AssignHotelBookedStatus">
                                                                <copy>
                                                                    <from>'BOOKED'</from>
                                                                    <to>$itinerary/ns1:hotels/ns1:hotel[$BookingHotelsForEachCounter]/ns1:bookingState</to>
                                                                </copy>
                                                            </assign>
                                                        </if>
                                                    </sequence>
                                                </scope>
                                            </forEach>
                                        </sequence>
                                    </scope>
                                    <assign name="IsBookedAssign">
                                        <copy>
                                            <from>true()</from>
                                            <to variable="isBooked"/>
                                        </copy>
                                        <copy>
                                            <from>'BOOKED'</from>
                                            <to>$itinerary/ns1:bookingState</to>
                                        </copy>
                                        <copy>
                                            <from>'DONE'</from>
                                            <to>$itinerary/ns1:paymentStatus</to>
                                        </copy>
                                    </assign>
                                    <assign name="AsignBookItineraryOut">
                                        <copy>
                                            <from>true()</from>
                                            <to>$BookItineraryOut.bookItineraryResponsePart/booked</to>
                                        </copy>
                                    </assign>
                                    <reply name="BookItineraryReply" partnerLink="TravelGoodPartnerLink" operation="bookItinerary" portType="ns0:travelGoodPortType" variable="BookItineraryOut"/>
                                </sequence>
                                <else>
                                    <sequence name="IfNotCanceled_BookItinerary_false">
                                        <assign name="AssignBookItineraryFalse">
                                            <copy>
                                                <from>false()</from>
                                                <to>$BookItineraryFalseOut.bookItineraryResponsePart/booked</to>
                                            </copy>
                                        </assign>
                                        <reply name="BookItineraryFalseReply" partnerLink="TravelGoodPartnerLink" operation="bookItinerary" portType="ns0:travelGoodPortType" variable="BookItineraryFalseOut"/>
                                    </sequence>
                                </else>
                            </if>
                        </scope>
                    </onMessage>
                    <onMessage partnerLink="TravelGoodPartnerLink" operation="cancelItinerary" portType="ns0:travelGoodPortType" variable="CancelItineraryIn">
                        <correlations>
                            <correlation set="BookingNumberCorrelationSet" initiate="no"/>
                        </correlations>
                        <scope name="CancelItineraryScope">
                            <variables>
                                <variable name="CancelItineraryFaultVar" messageType="ns0:cancelItineraryFault"/>
                            </variables>
                            <faultHandlers>
                                <catchAll>
                                    <sequence name="CancellItineraryFaultSequence">
                                        <assign name="AssignCancellItineraryFaultVar">
                                            <copy>
                                                <from>$CancelItineraryIn.cancelItineraryRequestPart/bookingNumber</from>
                                                <to>$CancelItineraryFaultVar.cancelItineraryFaultPart/bookingNumber</to>
                                            </copy>
                                            <copy>
                                                <from>'Failed to cancel the trip!'</from>
                                                <to>$CancelItineraryFaultVar.cancelItineraryFaultPart/reason</to>
                                            </copy>
                                        </assign>
                                        <reply name="CancellItineraryFaultReply" partnerLink="TravelGoodPartnerLink" operation="cancelItinerary" portType="ns0:travelGoodPortType" faultName="ns0:cancelItineraryFault" variable="CancelItineraryFaultVar"/>
                                    </sequence>
                                </catchAll>
                            </faultHandlers>
                            <if name="IfNotCanceled_CancelItinerary">
                                <condition>not($isCanceled)</condition>
                                <sequence name="IfNotCanceled_CancelItinerary_true">
                                    <scope name="CancelingScope">
                                        <sequence name="FlightAndHotelCancelingSequence">
                                            <forEach name="CancelingFlightsForEach" parallel="no" counterName="CancelingFlightsForEachCounter">
                                                <startCounterValue>1</startCounterValue>
                                                <finalCounterValue>count($itinerary/ns1:flights/ns1:flight)</finalCounterValue>
                                                <scope name="CancelSingleFlightSequence">
                                                    <variables>
                                                        <variable name="CancelReservationOut_LameDuck" messageType="tns:cancelReservationResponse"/>
                                                        <variable name="CancelReservationIn_LameDuck" messageType="tns:cancelReservationRequest"/>
                                                    </variables>
                                                    <sequence name="CancelingFlightsForEachSequence">
                                                        <if name="IfFlightBooked">
                                                            <condition>'BOOKED' = $itinerary/ns1:flights/ns1:flight[$CancelingFlightsForEachCounter]/ns1:bookingState</condition>
                                                            <sequence name="IfFlightBooked_true">
                                                                <assign name="FlightBookingNumberAssign">
                                                                    <copy>
                                                                        <from>$CancelItineraryIn.cancelItineraryRequestPart/creditCard/ns1:name</from>
                                                                        <to>$CancelReservationIn_LameDuck.cancelReservationRequestPart/creditCard/ns1:name</to>
                                                                    </copy>
                                                                    <copy>
                                                                        <from>$CancelItineraryIn.cancelItineraryRequestPart/creditCard/ns1:number</from>
                                                                        <to>$CancelReservationIn_LameDuck.cancelReservationRequestPart/creditCard/ns1:number</to>
                                                                    </copy>
                                                                    <copy>
                                                                        <from>$CancelItineraryIn.cancelItineraryRequestPart/creditCard/ns1:expMonth</from>
                                                                        <to>$CancelReservationIn_LameDuck.cancelReservationRequestPart/creditCard/ns1:expMonth</to>
                                                                    </copy>
                                                                    <copy>
                                                                        <from>$CancelItineraryIn.cancelItineraryRequestPart/creditCard/ns1:expYear</from>
                                                                        <to>$CancelReservationIn_LameDuck.cancelReservationRequestPart/creditCard/ns1:expYear</to>
                                                                    </copy>
                                                                    <copy>
                                                                        <from>$itinerary/ns1:flights/ns1:flight[$CancelingFlightsForEachCounter]/ns1:bookingNumber</from>
                                                                        <to>$CancelReservationIn_LameDuck.cancelReservationRequestPart/bookingNumber</to>
                                                                    </copy>
                                                                    <copy>
                                                                        <from>$itinerary/ns1:flights/ns1:flight[$CancelingFlightsForEachCounter]/ns1:price</from>
                                                                        <to>$CancelReservationIn_LameDuck.cancelReservationRequestPart/price</to>
                                                                    </copy>
                                                                </assign>
                                                                <invoke name="CancelFlight_LameDuck" partnerLink="LameDuckPartnerLink" operation="cancelReservation" portType="tns:lameDuckPortType" inputVariable="CancelReservationIn_LameDuck" outputVariable="CancelReservationOut_LameDuck"/>
                                                                <if name="IfCancelFlightSucceeded">
                                                                    <condition>$CancelReservationOut_LameDuck.cancelReservationResponsePart/canceled</condition>
                                                                    <assign name="AssignFlightCanceled">
                                                                        <copy>
                                                                            <from>'CANCELLED'</from>
                                                                            <to>$itinerary/ns1:flights/ns1:flight[$CancelingFlightsForEachCounter]/ns1:bookingState</to>
                                                                        </copy>
                                                                    </assign>
                                                                </if>
                                                            </sequence>
                                                        </if>
                                                    </sequence>
                                                </scope>
                                            </forEach>
                                            <forEach name="CancelingHotelsForEach" parallel="no" counterName="CancelingHotelsForEachCounter">
                                                <startCounterValue>1</startCounterValue>
                                                <finalCounterValue>count($itinerary/ns1:hotels/ns1:hotel)</finalCounterValue>
                                                <completionCondition>
                                                    <branches/>
                                                </completionCondition>
                                                <scope name="CancelSingleHotelsSequence">
                                                    <variables>
                                                        <variable name="CancelHotelOut_NiceView" xmlns:tns="urn:niceview.dtu.dk" messageType="tns:cancelHotelResponse"/>
                                                        <variable name="CancelHotelIn_NiceView" xmlns:tns="urn:niceview.dtu.dk" messageType="tns:cancelHotelRequest"/>
                                                    </variables>
                                                    <if name="IfHotelBooked">
                                                        <condition>'BOOKED' = $itinerary/ns1:hotels/ns1:hotel/ns1:bookingState</condition>
                                                        <sequence name="IfHotelBooked_true">
                                                            <assign name="HotelBookingNumberAssign">
                                                                <copy>
                                                                    <from>$itinerary/ns1:hotels/ns1:hotel[$CancelingHotelsForEachCounter]/ns1:bookingNumber</from>
                                                                    <to>$CancelHotelIn_NiceView.cancelHotelRequestPart/bookingNumber</to>
                                                                </copy>
                                                            </assign>
                                                            <invoke name="CancelHotel_NiceView" partnerLink="NiceViewPartnerLink" operation="cancelHotel" xmlns:tns="urn:niceview.dtu.dk" portType="tns:niceViewPortType" inputVariable="CancelHotelIn_NiceView" outputVariable="CancelHotelOut_NiceView"/>
                                                            <if name="IfCancelHotelSucceeded">
                                                                <condition>$CancelHotelOut_NiceView.cancelHotelResponsePart/canceled</condition>
                                                                <assign name="AssignHotelCanceledStatus">
                                                                    <copy>
                                                                        <from>'CANCELLED'</from>
                                                                        <to>$itinerary/ns1:hotels/ns1:hotel[$CancelingHotelsForEachCounter]/ns1:bookingState</to>
                                                                    </copy>
                                                                </assign>
                                                            </if>
                                                        </sequence>
                                                    </if>
                                                </scope>
                                            </forEach>
                                        </sequence>
                                    </scope>
                                    <assign name="IsCanceledAssign">
                                        <copy>
                                            <from>true()</from>
                                            <to variable="isCanceled"/>
                                        </copy>
                                        <copy>
                                            <from>'CANCELLED'</from>
                                            <to>$itinerary/ns1:bookingState</to>
                                        </copy>
                                    </assign>
                                    <assign name="AssignCancelItineraryOut">
                                        <copy>
                                            <from>true()</from>
                                            <to>$CancelItineraryOut.cancelItineraryResponsePart/canceled</to>
                                        </copy>
                                    </assign>
                                    <reply name="CancelItineraryOut" partnerLink="TravelGoodPartnerLink" operation="cancelItinerary" portType="ns0:travelGoodPortType" variable="CancelItineraryOut"/>
                                </sequence>
                                <else>
                                    <sequence name="IfNotCanceled_CancelItinerary_false">
                                        <assign name="AssignItineraryCancelFalse">
                                            <copy>
                                                <from>false()</from>
                                                <to>$CancelItineraryOutFalse.cancelItineraryResponsePart/canceled</to>
                                            </copy>
                                        </assign>
                                        <reply name="CancelItineraryOutFalse" partnerLink="TravelGoodPartnerLink" operation="cancelItinerary" portType="ns0:travelGoodPortType" variable="CancelItineraryOutFalse"/>
                                    </sequence>
                                </else>
                            </if>
                        </scope>
                    </onMessage>
                    <onAlarm>
                        <until>$deadline</until>
                        <exit name="Exit"/>
                    </onAlarm>
                </pick>
                <sequence name="FixDeadlineSequence">
                    <assign name="AssignCheckDeadline">
                        <copy>
                            <from variable="itinerary"/>
                            <to>$GetProcessDeadlineIn.getProcessDeadlineRequestPart/itinerary</to>
                        </copy>
                    </assign>
                    <invoke name="InvokeGetDeadline" partnerLink="TravelGoodBpelUtilsPartnerLink" operation="getProcessDeadline" xmlns:tns="urn:utils.bpel.travelgood.dtu.dk" portType="tns:travelGoodBpelUtilsPortType" inputVariable="GetProcessDeadlineIn" outputVariable="GetProcessDeadlineOut"/>
                    <assign name="AssignNewDeadline">
                        <copy>
                            <from>$GetProcessDeadlineOut.getProcessDeadlineResponse/deadline</from>
                            <to variable="deadline"/>
                        </copy>
                    </assign>
                </sequence>
            </sequence>
            <condition>false()</condition>
        </repeatUntil>
    </sequence>
</process>
